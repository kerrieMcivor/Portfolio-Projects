/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global places and regions. Easily obtain country, region, and place data for use in your apps!  <ul>   <li>Filter places by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort places by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all places in a given country or region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure.</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain places     being marked deleted (e.g., duplicates removed). By default, endpoints returning place data will exclude     places marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../lib/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../lib/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GeoDb);
  }
}(this, function(expect, GeoDb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GeoDb.LocaleApi();
  });

  describe('(package)', function() {
    describe('LocaleApi', function() {
      describe('getCurrenciesUsingGET', function() {
        it('should call getCurrenciesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCurrenciesUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var opts = {};
          opts.hateoasMode = true;
          opts.limit = 10;
          opts.offset = 0;

          instance.getCurrenciesUsingGET(countryId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.CurrenciesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Currency);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                {
                  let dataCtr = data.countryCodes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.symbol).to.be.a('string');
                expect(data.symbol).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLanguagesUsingGET', function() {
        it('should call getLanguagesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getLanguagesUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.hateoasMode = true;
          opts.limit = 10;
          opts.offset = 0;

          instance.getLanguagesUsingGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.LanguagesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.LanguageDescriptor);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("undefined");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLocalesUsingGET', function() {
        it('should call getLocalesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getLocalesUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.hateoasMode = true;
          opts.limit = 10;
          opts.offset = 0;

          instance.getLocalesUsingGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.LocalesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Locale);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTimeZoneDateTimeUsingGET', function() {
        it('should call getTimeZoneDateTimeUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getTimeZoneDateTimeUsingGET call and complete the assertions
          /*
          var zoneId = "zoneId_example";

          instance.getTimeZoneDateTimeUsingGET(zoneId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.DateTimeResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(Date);
            expect(data.data).to.be(new Date());

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTimeZoneTimeUsingGET', function() {
        it('should call getTimeZoneTimeUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getTimeZoneTimeUsingGET call and complete the assertions
          /*
          var zoneId = "zoneId_example";

          instance.getTimeZoneTimeUsingGET(zoneId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.TimeResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a('string');
            expect(data.data).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTimeZoneUsingGET', function() {
        it('should call getTimeZoneUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getTimeZoneUsingGET call and complete the assertions
          /*
          var zoneId = "zoneId_example";

          instance.getTimeZoneUsingGET(zoneId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.TimeZoneResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.rawUtcOffsetHours).to.be.a('number');
            expect(data.rawUtcOffsetHours).to.be(0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTimezonesUsingGET', function() {
        it('should call getTimezonesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getTimezonesUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.hateoasMode = true;
          opts.limit = 10;
          opts.offset = 0;

          instance.getTimezonesUsingGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.TimeZonesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.TimeZoneDescriptor);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.rawUtcOffsetHours).to.be.a('number');
                expect(data.rawUtcOffsetHours).to.be(0);

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
