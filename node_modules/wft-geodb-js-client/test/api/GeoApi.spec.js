/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global places and regions. Easily obtain country, region, and place data for use in your apps!  <ul>   <li>Filter places by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort places by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all places in a given country or region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure.</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain places     being marked deleted (e.g., duplicates removed). By default, endpoints returning place data will exclude     places marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../lib/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../lib/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GeoDb);
  }
}(this, function(expect, GeoDb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GeoDb.GeoApi();
  });

  describe('(package)', function() {
    describe('GeoApi', function() {
      describe('findAdminDivisionsUsingGET', function() {
        it('should call findAdminDivisionsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findAdminDivisionsUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.location = "location_example";
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findAdminDivisionsUsingGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findCitiesNearAdminDivisionUsingGET', function() {
        it('should call findCitiesNearAdminDivisionUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findCitiesNearAdminDivisionUsingGET call and complete the assertions
          /*
          var divisionId = "divisionId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findCitiesNearAdminDivisionUsingGET(divisionId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findCitiesNearCityUsingGET', function() {
        it('should call findCitiesNearCityUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findCitiesNearCityUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findCitiesNearCityUsingGET(cityId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findCitiesNearLocationUsingGET', function() {
        it('should call findCitiesNearLocationUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findCitiesNearLocationUsingGET call and complete the assertions
          /*
          var locationId = "locationId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findCitiesNearLocationUsingGET(locationId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findCitiesUsingGET', function() {
        it('should call findCitiesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findCitiesUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.location = "location_example";
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findCitiesUsingGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findCountryPlacesUsingGET', function() {
        it('should call findCountryPlacesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findCountryPlacesUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var opts = {};
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findCountryPlacesUsingGET(countryId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findDivisionsNearAdminDivisionUsingGET', function() {
        it('should call findDivisionsNearAdminDivisionUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findDivisionsNearAdminDivisionUsingGET call and complete the assertions
          /*
          var divisionId = "divisionId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findDivisionsNearAdminDivisionUsingGET(divisionId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findDivisionsNearCityUsingGET', function() {
        it('should call findDivisionsNearCityUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findDivisionsNearCityUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findDivisionsNearCityUsingGET(cityId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findDivisionsNearLocationUsingGET', function() {
        it('should call findDivisionsNearLocationUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findDivisionsNearLocationUsingGET call and complete the assertions
          /*
          var locationId = "locationId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findDivisionsNearLocationUsingGET(locationId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findPlacesNearAdminDivisionUsingGET', function() {
        it('should call findPlacesNearAdminDivisionUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findPlacesNearAdminDivisionUsingGET call and complete the assertions
          /*
          var divisionId = "divisionId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findPlacesNearAdminDivisionUsingGET(divisionId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findPlacesNearCityUsingGET', function() {
        it('should call findPlacesNearCityUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findPlacesNearCityUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findPlacesNearCityUsingGET(cityId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findPlacesNearLocationUsingGET', function() {
        it('should call findPlacesNearLocationUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findPlacesNearLocationUsingGET call and complete the assertions
          /*
          var locationId = "locationId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findPlacesNearLocationUsingGET(locationId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findPlacesNearPlaceUsingGET', function() {
        it('should call findPlacesNearPlaceUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findPlacesNearPlaceUsingGET call and complete the assertions
          /*
          var placeId = "placeId_example";
          var opts = {};
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findPlacesNearPlaceUsingGET(placeId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findPlacesUsingGET', function() {
        it('should call findPlacesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findPlacesUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.location = "location_example";
          opts.radius = 56;
          opts.distanceUnit = "MI";
          opts.countryIds = "countryIds_example";
          opts.excludedCountryIds = "excludedCountryIds_example";
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findPlacesUsingGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findRegionCitiesUsingGET', function() {
        it('should call findRegionCitiesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findRegionCitiesUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var regionCode = "regionCode_example";
          var opts = {};
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findRegionCitiesUsingGET(countryId, regionCode, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findRegionDivisionsUsingGET', function() {
        it('should call findRegionDivisionsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findRegionDivisionsUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var regionCode = "regionCode_example";
          var opts = {};
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findRegionDivisionsUsingGET(countryId, regionCode, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findRegionPlacesUsingGET', function() {
        it('should call findRegionPlacesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for findRegionPlacesUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var regionCode = "regionCode_example";
          var opts = {};
          opts.minPopulation = 56;
          opts.maxPopulation = 56;
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.timeZoneIds = "timeZoneIds_example";
          opts.types = "types_example";
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";
          opts.includeDeleted = "NONE";

          instance.findRegionPlacesUsingGET(countryId, regionCode, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlacesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.PopulatedPlaceSummary);
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.population).to.be.a('number');
                expect(data.population).to.be(0);
                expect(data.region).to.be.a('string');
                expect(data.region).to.be("");
                expect(data.regionCode).to.be.a('string');
                expect(data.regionCode).to.be("");
                expect(data.regionWdId).to.be.a('string');
                expect(data.regionWdId).to.be("");
                expect(data.type).to.be.a(GeoDb.PopulatedPlaceType);
                    expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAdminDivisionUsingGET', function() {
        it('should call getAdminDivisionUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getAdminDivisionUsingGET call and complete the assertions
          /*
          var divisionId = "divisionId_example";
          var opts = {};
          opts.asciiMode = false;
          opts.languageCode = "languageCode_example";

          instance.getAdminDivisionUsingGET(divisionId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlaceResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(GeoDb.PopulatedPlaceDetails);
                  expect(data.data.city).to.be.a('string');
              expect(data.data.city).to.be("");
              expect(data.data.country).to.be.a('string');
              expect(data.data.country).to.be("");
              expect(data.data.countryCode).to.be.a('string');
              expect(data.data.countryCode).to.be("");
              expect(data.data.deleted).to.be.a('boolean');
              expect(data.data.deleted).to.be(false);
              expect(data.data.elevationMeters).to.be.a('number');
              expect(data.data.elevationMeters).to.be(0);
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.latitude).to.be.a('number');
              expect(data.data.latitude).to.be(0.0);
              expect(data.data.longitude).to.be.a('number');
              expect(data.data.longitude).to.be(0.0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.population).to.be.a('number');
              expect(data.data.population).to.be(0);
              expect(data.data.region).to.be.a('string');
              expect(data.data.region).to.be("");
              expect(data.data.regionCode).to.be.a('string');
              expect(data.data.regionCode).to.be("");
              expect(data.data.regionWdId).to.be.a('string');
              expect(data.data.regionWdId).to.be("");
              expect(data.data.timezone).to.be.a('string');
              expect(data.data.timezone).to.be("");
              expect(data.data.type).to.be.a(GeoDb.PopulatedPlaceType);
                  expect(data.data.wikiDataId).to.be.a('string');
              expect(data.data.wikiDataId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCityDateTimeUsingGET', function() {
        it('should call getCityDateTimeUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCityDateTimeUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";

          instance.getCityDateTimeUsingGET(cityId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.DateTimeResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(Date);
            expect(data.data).to.be(new Date());

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCityDistanceUsingGET', function() {
        it('should call getCityDistanceUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCityDistanceUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";
          var toCityId = "toCityId_example";
          var opts = {};
          opts.distanceUnit = "MI";

          instance.getCityDistanceUsingGET(cityId, toCityId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.DistanceResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a('number');
            expect(data.data).to.be(0.0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCityLocatedInUsingGET', function() {
        it('should call getCityLocatedInUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCityLocatedInUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";
          var opts = {};
          opts.asciiMode = false;
          opts.languageCode = "languageCode_example";

          instance.getCityLocatedInUsingGET(cityId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlaceResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(GeoDb.PopulatedPlaceDetails);
                  expect(data.data.city).to.be.a('string');
              expect(data.data.city).to.be("");
              expect(data.data.country).to.be.a('string');
              expect(data.data.country).to.be("");
              expect(data.data.countryCode).to.be.a('string');
              expect(data.data.countryCode).to.be("");
              expect(data.data.deleted).to.be.a('boolean');
              expect(data.data.deleted).to.be(false);
              expect(data.data.elevationMeters).to.be.a('number');
              expect(data.data.elevationMeters).to.be(0);
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.latitude).to.be.a('number');
              expect(data.data.latitude).to.be(0.0);
              expect(data.data.longitude).to.be.a('number');
              expect(data.data.longitude).to.be(0.0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.population).to.be.a('number');
              expect(data.data.population).to.be(0);
              expect(data.data.region).to.be.a('string');
              expect(data.data.region).to.be("");
              expect(data.data.regionCode).to.be.a('string');
              expect(data.data.regionCode).to.be("");
              expect(data.data.regionWdId).to.be.a('string');
              expect(data.data.regionWdId).to.be("");
              expect(data.data.timezone).to.be.a('string');
              expect(data.data.timezone).to.be("");
              expect(data.data.type).to.be.a(GeoDb.PopulatedPlaceType);
                  expect(data.data.wikiDataId).to.be.a('string');
              expect(data.data.wikiDataId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCityTimeUsingGET', function() {
        it('should call getCityTimeUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCityTimeUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";

          instance.getCityTimeUsingGET(cityId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.TimeResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a('string');
            expect(data.data).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCityUsingGET', function() {
        it('should call getCityUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCityUsingGET call and complete the assertions
          /*
          var cityId = "cityId_example";
          var opts = {};
          opts.asciiMode = false;
          opts.languageCode = "languageCode_example";

          instance.getCityUsingGET(cityId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlaceResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(GeoDb.PopulatedPlaceDetails);
                  expect(data.data.city).to.be.a('string');
              expect(data.data.city).to.be("");
              expect(data.data.country).to.be.a('string');
              expect(data.data.country).to.be("");
              expect(data.data.countryCode).to.be.a('string');
              expect(data.data.countryCode).to.be("");
              expect(data.data.deleted).to.be.a('boolean');
              expect(data.data.deleted).to.be(false);
              expect(data.data.elevationMeters).to.be.a('number');
              expect(data.data.elevationMeters).to.be(0);
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.latitude).to.be.a('number');
              expect(data.data.latitude).to.be(0.0);
              expect(data.data.longitude).to.be.a('number');
              expect(data.data.longitude).to.be(0.0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.population).to.be.a('number');
              expect(data.data.population).to.be(0);
              expect(data.data.region).to.be.a('string');
              expect(data.data.region).to.be("");
              expect(data.data.regionCode).to.be.a('string');
              expect(data.data.regionCode).to.be("");
              expect(data.data.regionWdId).to.be.a('string');
              expect(data.data.regionWdId).to.be("");
              expect(data.data.timezone).to.be.a('string');
              expect(data.data.timezone).to.be("");
              expect(data.data.type).to.be.a(GeoDb.PopulatedPlaceType);
                  expect(data.data.wikiDataId).to.be.a('string');
              expect(data.data.wikiDataId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCountriesUsingGET', function() {
        it('should call getCountriesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCountriesUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.currencyCode = "currencyCode_example";
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";

          instance.getCountriesUsingGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.CountriesResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.CountrySummary);
                expect(data.code).to.be.a('string');
                expect(data.code).to.be("");
                {
                  let dataCtr = data.currencyCodes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCountryUsingGET', function() {
        it('should call getCountryUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getCountryUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var opts = {};
          opts.asciiMode = false;
          opts.languageCode = "languageCode_example";

          instance.getCountryUsingGET(countryId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.CountryResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(GeoDb.CountryDetails);
                  expect(data.data.code).to.be.a('string');
              expect(data.data.code).to.be("");
              expect(data.data.callingCode).to.be.a('string');
              expect(data.data.callingCode).to.be("");
              {
                let dataCtr = data.data.currencyCodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.flagImageUri).to.be.a('string');
              expect(data.data.flagImageUri).to.be("");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.numRegions).to.be.a('number');
              expect(data.data.numRegions).to.be(0);
              expect(data.data.wikiDataId).to.be.a('string');
              expect(data.data.wikiDataId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPlaceDateTimeUsingGET', function() {
        it('should call getPlaceDateTimeUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getPlaceDateTimeUsingGET call and complete the assertions
          /*
          var placeId = "placeId_example";

          instance.getPlaceDateTimeUsingGET(placeId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.DateTimeResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(Date);
            expect(data.data).to.be(new Date());

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPlaceDistanceUsingGET', function() {
        it('should call getPlaceDistanceUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getPlaceDistanceUsingGET call and complete the assertions
          /*
          var placeId = "placeId_example";
          var toPlaceId = "toPlaceId_example";
          var opts = {};
          opts.distanceUnit = "MI";

          instance.getPlaceDistanceUsingGET(placeId, toPlaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.DistanceResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a('number');
            expect(data.data).to.be(0.0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPlaceLocatedInUsingGET', function() {
        it('should call getPlaceLocatedInUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getPlaceLocatedInUsingGET call and complete the assertions
          /*
          var placeId = "placeId_example";
          var opts = {};
          opts.asciiMode = false;
          opts.languageCode = "languageCode_example";

          instance.getPlaceLocatedInUsingGET(placeId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlaceResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(GeoDb.PopulatedPlaceDetails);
                  expect(data.data.city).to.be.a('string');
              expect(data.data.city).to.be("");
              expect(data.data.country).to.be.a('string');
              expect(data.data.country).to.be("");
              expect(data.data.countryCode).to.be.a('string');
              expect(data.data.countryCode).to.be("");
              expect(data.data.deleted).to.be.a('boolean');
              expect(data.data.deleted).to.be(false);
              expect(data.data.elevationMeters).to.be.a('number');
              expect(data.data.elevationMeters).to.be(0);
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.latitude).to.be.a('number');
              expect(data.data.latitude).to.be(0.0);
              expect(data.data.longitude).to.be.a('number');
              expect(data.data.longitude).to.be(0.0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.population).to.be.a('number');
              expect(data.data.population).to.be(0);
              expect(data.data.region).to.be.a('string');
              expect(data.data.region).to.be("");
              expect(data.data.regionCode).to.be.a('string');
              expect(data.data.regionCode).to.be("");
              expect(data.data.regionWdId).to.be.a('string');
              expect(data.data.regionWdId).to.be("");
              expect(data.data.timezone).to.be.a('string');
              expect(data.data.timezone).to.be("");
              expect(data.data.type).to.be.a(GeoDb.PopulatedPlaceType);
                  expect(data.data.wikiDataId).to.be.a('string');
              expect(data.data.wikiDataId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPlaceTimeUsingGET', function() {
        it('should call getPlaceTimeUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getPlaceTimeUsingGET call and complete the assertions
          /*
          var placeId = "placeId_example";

          instance.getPlaceTimeUsingGET(placeId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.TimeResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a('string');
            expect(data.data).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPlaceUsingGET', function() {
        it('should call getPlaceUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getPlaceUsingGET call and complete the assertions
          /*
          var placeId = "placeId_example";
          var opts = {};
          opts.asciiMode = false;
          opts.languageCode = "languageCode_example";

          instance.getPlaceUsingGET(placeId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.PopulatedPlaceResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(GeoDb.PopulatedPlaceDetails);
                  expect(data.data.city).to.be.a('string');
              expect(data.data.city).to.be("");
              expect(data.data.country).to.be.a('string');
              expect(data.data.country).to.be("");
              expect(data.data.countryCode).to.be.a('string');
              expect(data.data.countryCode).to.be("");
              expect(data.data.deleted).to.be.a('boolean');
              expect(data.data.deleted).to.be(false);
              expect(data.data.elevationMeters).to.be.a('number');
              expect(data.data.elevationMeters).to.be(0);
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.latitude).to.be.a('number');
              expect(data.data.latitude).to.be(0.0);
              expect(data.data.longitude).to.be.a('number');
              expect(data.data.longitude).to.be(0.0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.population).to.be.a('number');
              expect(data.data.population).to.be(0);
              expect(data.data.region).to.be.a('string');
              expect(data.data.region).to.be("");
              expect(data.data.regionCode).to.be.a('string');
              expect(data.data.regionCode).to.be("");
              expect(data.data.regionWdId).to.be.a('string');
              expect(data.data.regionWdId).to.be("");
              expect(data.data.timezone).to.be.a('string');
              expect(data.data.timezone).to.be("");
              expect(data.data.type).to.be.a(GeoDb.PopulatedPlaceType);
                  expect(data.data.wikiDataId).to.be.a('string');
              expect(data.data.wikiDataId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRegionUsingGET', function() {
        it('should call getRegionUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getRegionUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var regionCode = "regionCode_example";
          var opts = {};
          opts.asciiMode = false;
          opts.languageCode = "languageCode_example";

          instance.getRegionUsingGET(countryId, regionCode, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.RegionResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            expect(data.data).to.be.a(GeoDb.RegionDetails);
                  expect(data.data.capital).to.be.a('string');
              expect(data.data.capital).to.be("");
              expect(data.data.countryCode).to.be.a('string');
              expect(data.data.countryCode).to.be("");
              expect(data.data.fipsCode).to.be.a('string');
              expect(data.data.fipsCode).to.be("");
              expect(data.data.isoCode).to.be.a('string');
              expect(data.data.isoCode).to.be("");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.numCities).to.be.a('number');
              expect(data.data.numCities).to.be(0);
              expect(data.data.wikiDataId).to.be.a('string');
              expect(data.data.wikiDataId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRegionsUsingGET', function() {
        it('should call getRegionsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getRegionsUsingGET call and complete the assertions
          /*
          var countryId = "countryId_example";
          var opts = {};
          opts.namePrefix = "namePrefix_example";
          opts.namePrefixDefaultLangResults = true;
          opts.asciiMode = false;
          opts.hateoasMode = true;
          opts.languageCode = "languageCode_example";
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "sort_example";

          instance.getRegionsUsingGET(countryId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GeoDb.RegionsResponse);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Error);
                expect(data.code).to.be.a(GeoDb.ErrorCode);
                    expect(data.message).to.be.a('string');
                expect(data.message).to.be("");

                      }
            }
            {
              let dataCtr = data.links;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.Link);
                expect(data.href).to.be.a('string');
                expect(data.href).to.be("");
                expect(data.rel).to.be.a('string');
                expect(data.rel).to.be("");

                      }
            }
            expect(data.metadata).to.be.a(GeoDb.Metadata);
                  expect(data.metadata.currentOffset).to.be.a('number');
              expect(data.metadata.currentOffset).to.be("0");
              expect(data.metadata.totalCount).to.be.a('number');
              expect(data.metadata.totalCount).to.be("0");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GeoDb.RegionSummary);
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.fipsCode).to.be.a('string');
                expect(data.fipsCode).to.be("");
                expect(data.isoCode).to.be.a('string');
                expect(data.isoCode).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.wikiDataId).to.be.a('string');
                expect(data.wikiDataId).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
