/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global places and regions. Easily obtain country, region, and place data for use in your apps!  <ul>   <li>Filter places by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort places by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all places in a given country or region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure.</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain places     being marked deleted (e.g., duplicates removed). By default, endpoints returning place data will exclude     places marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestResponse', 'model/CurrenciesResponse', 'model/DateTimeResponse', 'model/ForbiddenResponse', 'model/LanguagesResponse', 'model/LocalesResponse', 'model/NotFoundResponse', 'model/TimeResponse', 'model/TimeZoneResponse', 'model/TimeZonesResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestResponse'), require('../model/CurrenciesResponse'), require('../model/DateTimeResponse'), require('../model/ForbiddenResponse'), require('../model/LanguagesResponse'), require('../model/LocalesResponse'), require('../model/NotFoundResponse'), require('../model/TimeResponse'), require('../model/TimeZoneResponse'), require('../model/TimeZonesResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.GeoDb) {
      root.GeoDb = {};
    }
    root.GeoDb.LocaleApi = factory(root.GeoDb.ApiClient, root.GeoDb.BadRequestResponse, root.GeoDb.CurrenciesResponse, root.GeoDb.DateTimeResponse, root.GeoDb.ForbiddenResponse, root.GeoDb.LanguagesResponse, root.GeoDb.LocalesResponse, root.GeoDb.NotFoundResponse, root.GeoDb.TimeResponse, root.GeoDb.TimeZoneResponse, root.GeoDb.TimeZonesResponse);
  }
}(this, function(ApiClient, BadRequestResponse, CurrenciesResponse, DateTimeResponse, ForbiddenResponse, LanguagesResponse, LocalesResponse, NotFoundResponse, TimeResponse, TimeZoneResponse, TimeZonesResponse) {
  'use strict';

  /**
   * Locale service.
   * @module api/LocaleApi
   * @version 2.0.0
   */

  /**
   * Constructs a new LocaleApi. 
   * @alias module:api/LocaleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Find currencies
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     * @param {String} countryId Currencies for this country id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CurrenciesResponse} and HTTP response
     */
    this.getCurrenciesUsingGETWithHttpInfo = function(countryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getCurrenciesUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'countryId': countryId,
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CurrenciesResponse;

      return this.apiClient.callApi(
        '/locale/currencies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find currencies
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     * @param {String} countryId Currencies for this country id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CurrenciesResponse}
     */
    this.getCurrenciesUsingGET = function(countryId, opts) {
      return this.getCurrenciesUsingGETWithHttpInfo(countryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get languages
     * Get all supported languages
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguagesResponse} and HTTP response
     */
    this.getLanguagesUsingGETWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LanguagesResponse;

      return this.apiClient.callApi(
        '/locale/languages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get languages
     * Get all supported languages
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguagesResponse}
     */
    this.getLanguagesUsingGET = function(opts) {
      return this.getLanguagesUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get locales
     * Get all known locales
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LocalesResponse} and HTTP response
     */
    this.getLocalesUsingGETWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LocalesResponse;

      return this.apiClient.callApi(
        '/locale/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get locales
     * Get all known locales
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LocalesResponse}
     */
    this.getLocalesUsingGET = function(opts) {
      return this.getLocalesUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get time-zone date-time
     * Get time-zone date-time
     * @param {String} zoneId A time-zone id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DateTimeResponse} and HTTP response
     */
    this.getTimeZoneDateTimeUsingGETWithHttpInfo = function(zoneId) {
      var postBody = null;

      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTimeZoneDateTimeUsingGET");
      }


      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DateTimeResponse;

      return this.apiClient.callApi(
        '/locale/timezones/{zoneId}/dateTime', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get time-zone date-time
     * Get time-zone date-time
     * @param {String} zoneId A time-zone id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DateTimeResponse}
     */
    this.getTimeZoneDateTimeUsingGET = function(zoneId) {
      return this.getTimeZoneDateTimeUsingGETWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get time-zone time
     * Get time-zone time
     * @param {String} zoneId A time-zone id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TimeResponse} and HTTP response
     */
    this.getTimeZoneTimeUsingGETWithHttpInfo = function(zoneId) {
      var postBody = null;

      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTimeZoneTimeUsingGET");
      }


      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TimeResponse;

      return this.apiClient.callApi(
        '/locale/timezones/{zoneId}/time', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get time-zone time
     * Get time-zone time
     * @param {String} zoneId A time-zone id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TimeResponse}
     */
    this.getTimeZoneTimeUsingGET = function(zoneId) {
      return this.getTimeZoneTimeUsingGETWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get time-zone
     * Get time-zone
     * @param {String} zoneId A time-zone id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TimeZoneResponse} and HTTP response
     */
    this.getTimeZoneUsingGETWithHttpInfo = function(zoneId) {
      var postBody = null;

      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTimeZoneUsingGET");
      }


      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TimeZoneResponse;

      return this.apiClient.callApi(
        '/locale/timezones/{zoneId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get time-zone
     * Get time-zone
     * @param {String} zoneId A time-zone id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TimeZoneResponse}
     */
    this.getTimeZoneUsingGET = function(zoneId) {
      return this.getTimeZoneUsingGETWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get time-zones
     * Get all known time-zones
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TimeZonesResponse} and HTTP response
     */
    this.getTimezonesUsingGETWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TimeZonesResponse;

      return this.apiClient.callApi(
        '/locale/timezones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get time-zones
     * Get all known time-zones
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TimeZonesResponse}
     */
    this.getTimezonesUsingGET = function(opts) {
      return this.getTimezonesUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
