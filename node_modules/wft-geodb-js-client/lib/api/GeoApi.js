/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global places and regions. Easily obtain country, region, and place data for use in your apps!  <ul>   <li>Filter places by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort places by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all places in a given country or region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure.</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain places     being marked deleted (e.g., duplicates removed). By default, endpoints returning place data will exclude     places marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestResponse', 'model/CountriesResponse', 'model/CountryResponse', 'model/DateTimeResponse', 'model/DistanceResponse', 'model/ForbiddenResponse', 'model/NotFoundResponse', 'model/PopulatedPlaceResponse', 'model/PopulatedPlacesResponse', 'model/RegionResponse', 'model/RegionsResponse', 'model/TimeResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestResponse'), require('../model/CountriesResponse'), require('../model/CountryResponse'), require('../model/DateTimeResponse'), require('../model/DistanceResponse'), require('../model/ForbiddenResponse'), require('../model/NotFoundResponse'), require('../model/PopulatedPlaceResponse'), require('../model/PopulatedPlacesResponse'), require('../model/RegionResponse'), require('../model/RegionsResponse'), require('../model/TimeResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.GeoDb) {
      root.GeoDb = {};
    }
    root.GeoDb.GeoApi = factory(root.GeoDb.ApiClient, root.GeoDb.BadRequestResponse, root.GeoDb.CountriesResponse, root.GeoDb.CountryResponse, root.GeoDb.DateTimeResponse, root.GeoDb.DistanceResponse, root.GeoDb.ForbiddenResponse, root.GeoDb.NotFoundResponse, root.GeoDb.PopulatedPlaceResponse, root.GeoDb.PopulatedPlacesResponse, root.GeoDb.RegionResponse, root.GeoDb.RegionsResponse, root.GeoDb.TimeResponse);
  }
}(this, function(ApiClient, BadRequestResponse, CountriesResponse, CountryResponse, DateTimeResponse, DistanceResponse, ForbiddenResponse, NotFoundResponse, PopulatedPlaceResponse, PopulatedPlacesResponse, RegionResponse, RegionsResponse, TimeResponse) {
  'use strict';

  /**
   * Geo service.
   * @module api/GeoApi
   * @version 2.0.0
   */

  /**
   * Constructs a new GeoApi. 
   * @alias module:api/GeoApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Find admin divisions
     * Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findAdminDivisionsUsingGETWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'location': opts['location'],
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/adminDivisions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find admin divisions
     * Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findAdminDivisionsUsingGET = function(opts) {
      return this.findAdminDivisionsUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find cities near division
     * Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findCitiesNearAdminDivisionUsingGETWithHttpInfo = function(divisionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling findCitiesNearAdminDivisionUsingGET");
      }


      var pathParams = {
        'divisionId': divisionId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/adminDivisions/{divisionId}/nearbyCities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find cities near division
     * Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findCitiesNearAdminDivisionUsingGET = function(divisionId, opts) {
      return this.findCitiesNearAdminDivisionUsingGETWithHttpInfo(divisionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find cities near city
     * Find cities near the given city, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findCitiesNearCityUsingGETWithHttpInfo = function(cityId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling findCitiesNearCityUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}/nearbyCities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find cities near city
     * Find cities near the given city, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findCitiesNearCityUsingGET = function(cityId, opts) {
      return this.findCitiesNearCityUsingGETWithHttpInfo(cityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find cities near location
     * Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findCitiesNearLocationUsingGETWithHttpInfo = function(locationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling findCitiesNearLocationUsingGET");
      }


      var pathParams = {
        'locationId': locationId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/locations/{locationId}/nearbyCities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find cities near location
     * Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findCitiesNearLocationUsingGET = function(locationId, opts) {
      return this.findCitiesNearLocationUsingGETWithHttpInfo(locationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find cities
     * Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findCitiesUsingGETWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'location': opts['location'],
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/cities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find cities
     * Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findCitiesUsingGET = function(opts) {
      return this.findCitiesUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find country places
     * Get the country's places. The country is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findCountryPlacesUsingGETWithHttpInfo = function(countryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling findCountryPlacesUsingGET");
      }


      var pathParams = {
        'countryId': countryId
      };
      var queryParams = {
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/countries/{countryId}/places', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find country places
     * Get the country's places. The country is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findCountryPlacesUsingGET = function(countryId, opts) {
      return this.findCountryPlacesUsingGETWithHttpInfo(countryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find admin divisions near division
     * Find administrative divisions near the given division, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findDivisionsNearAdminDivisionUsingGETWithHttpInfo = function(divisionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling findDivisionsNearAdminDivisionUsingGET");
      }


      var pathParams = {
        'divisionId': divisionId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/adminDivisions/{divisionId}/nearbyDivisions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find admin divisions near division
     * Find administrative divisions near the given division, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findDivisionsNearAdminDivisionUsingGET = function(divisionId, opts) {
      return this.findDivisionsNearAdminDivisionUsingGETWithHttpInfo(divisionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find admin divisions near city
     * Find administrative divisions near the given city, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findDivisionsNearCityUsingGETWithHttpInfo = function(cityId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling findDivisionsNearCityUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}/nearbyDivisions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find admin divisions near city
     * Find administrative divisions near the given city, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findDivisionsNearCityUsingGET = function(cityId, opts) {
      return this.findDivisionsNearCityUsingGETWithHttpInfo(cityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find admin divisions near location
     * Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findDivisionsNearLocationUsingGETWithHttpInfo = function(locationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling findDivisionsNearLocationUsingGET");
      }


      var pathParams = {
        'locationId': locationId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/locations/{locationId}/nearbyDivisions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find admin divisions near location
     * Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findDivisionsNearLocationUsingGET = function(locationId, opts) {
      return this.findDivisionsNearLocationUsingGETWithHttpInfo(locationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find places near division
     * Find places near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findPlacesNearAdminDivisionUsingGETWithHttpInfo = function(divisionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling findPlacesNearAdminDivisionUsingGET");
      }


      var pathParams = {
        'divisionId': divisionId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/adminDivisions/{divisionId}/nearbyPlaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find places near division
     * Find places near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findPlacesNearAdminDivisionUsingGET = function(divisionId, opts) {
      return this.findPlacesNearAdminDivisionUsingGETWithHttpInfo(divisionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find places near city
     * Find places near the given city, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findPlacesNearCityUsingGETWithHttpInfo = function(cityId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling findPlacesNearCityUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}/nearbyPlaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find places near city
     * Find places near the given city, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findPlacesNearCityUsingGET = function(cityId, opts) {
      return this.findPlacesNearCityUsingGETWithHttpInfo(cityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find places near location
     * Find places near the given location, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findPlacesNearLocationUsingGETWithHttpInfo = function(locationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling findPlacesNearLocationUsingGET");
      }


      var pathParams = {
        'locationId': locationId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/locations/{locationId}/nearbyPlaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find places near location
     * Find places near the given location, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findPlacesNearLocationUsingGET = function(locationId, opts) {
      return this.findPlacesNearLocationUsingGETWithHttpInfo(locationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find places near place
     * Find places near the given place, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findPlacesNearPlaceUsingGETWithHttpInfo = function(placeId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling findPlacesNearPlaceUsingGET");
      }


      var pathParams = {
        'placeId': placeId
      };
      var queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/places/{placeId}/nearbyPlaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find places near place
     * Find places near the given place, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findPlacesNearPlaceUsingGET = function(placeId, opts) {
      return this.findPlacesNearPlaceUsingGETWithHttpInfo(placeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find places
     * Find places, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findPlacesUsingGETWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'location': opts['location'],
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/places', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find places
     * Find places, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} opts.radius The location radius within which to find places
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @param {String} opts.countryIds Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} opts.excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findPlacesUsingGET = function(opts) {
      return this.findPlacesUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find country region cities
     * Get country region cities. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findRegionCitiesUsingGETWithHttpInfo = function(countryId, regionCode, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling findRegionCitiesUsingGET");
      }

      // verify the required parameter 'regionCode' is set
      if (regionCode === undefined || regionCode === null) {
        throw new Error("Missing the required parameter 'regionCode' when calling findRegionCitiesUsingGET");
      }


      var pathParams = {
        'countryId': countryId,
        'regionCode': regionCode
      };
      var queryParams = {
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions/{regionCode}/cities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find country region cities
     * Get country region cities. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only cities for these types (comma-delimited): ADM2 | CITY
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findRegionCitiesUsingGET = function(countryId, regionCode, opts) {
      return this.findRegionCitiesUsingGETWithHttpInfo(countryId, regionCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find country region administrative divisions
     * Get country region administrative divisions. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findRegionDivisionsUsingGETWithHttpInfo = function(countryId, regionCode, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling findRegionDivisionsUsingGET");
      }

      // verify the required parameter 'regionCode' is set
      if (regionCode === undefined || regionCode === null) {
        throw new Error("Missing the required parameter 'regionCode' when calling findRegionDivisionsUsingGET");
      }


      var pathParams = {
        'countryId': countryId,
        'regionCode': regionCode
      };
      var queryParams = {
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions/{regionCode}/adminDivisions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find country region administrative divisions
     * Get country region administrative divisions. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findRegionDivisionsUsingGET = function(countryId, regionCode, opts) {
      return this.findRegionDivisionsUsingGETWithHttpInfo(countryId, regionCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find country region places
     * Get country region places. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlacesResponse} and HTTP response
     */
    this.findRegionPlacesUsingGETWithHttpInfo = function(countryId, regionCode, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling findRegionPlacesUsingGET");
      }

      // verify the required parameter 'regionCode' is set
      if (regionCode === undefined || regionCode === null) {
        throw new Error("Missing the required parameter 'regionCode' when calling findRegionPlacesUsingGET");
      }


      var pathParams = {
        'countryId': countryId,
        'regionCode': regionCode
      };
      var queryParams = {
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlacesResponse;

      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions/{regionCode}/places', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find country region places
     * Get country region places. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minPopulation Only places having at least this population
     * @param {Number} opts.maxPopulation Only places having no more than this population
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {String} opts.timeZoneIds Only places in these time-zones (comma-delimited)
     * @param {String} opts.types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} opts.includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (default to NONE)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlacesResponse}
     */
    this.findRegionPlacesUsingGET = function(countryId, regionCode, opts) {
      return this.findRegionPlacesUsingGETWithHttpInfo(countryId, regionCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get admin division details
     * Get administrative division details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlaceResponse} and HTTP response
     */
    this.getAdminDivisionUsingGETWithHttpInfo = function(divisionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling getAdminDivisionUsingGET");
      }


      var pathParams = {
        'divisionId': divisionId
      };
      var queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlaceResponse;

      return this.apiClient.callApi(
        '/geo/adminDivisions/{divisionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get admin division details
     * Get administrative division details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlaceResponse}
     */
    this.getAdminDivisionUsingGET = function(divisionId, opts) {
      return this.getAdminDivisionUsingGETWithHttpInfo(divisionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get city date-time
     * Get city date-time
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DateTimeResponse} and HTTP response
     */
    this.getCityDateTimeUsingGETWithHttpInfo = function(cityId) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityDateTimeUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DateTimeResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}/dateTime', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get city date-time
     * Get city date-time
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DateTimeResponse}
     */
    this.getCityDateTimeUsingGET = function(cityId) {
      return this.getCityDateTimeUsingGETWithHttpInfo(cityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get city distance
     * Get distance from the given city
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {String} toCityId Distance to this city
     * @param {Object} opts Optional parameters
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistanceResponse} and HTTP response
     */
    this.getCityDistanceUsingGETWithHttpInfo = function(cityId, toCityId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityDistanceUsingGET");
      }

      // verify the required parameter 'toCityId' is set
      if (toCityId === undefined || toCityId === null) {
        throw new Error("Missing the required parameter 'toCityId' when calling getCityDistanceUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'toCityId': toCityId,
        'distanceUnit': opts['distanceUnit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DistanceResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}/distance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get city distance
     * Get distance from the given city
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {String} toCityId Distance to this city
     * @param {Object} opts Optional parameters
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistanceResponse}
     */
    this.getCityDistanceUsingGET = function(cityId, toCityId, opts) {
      return this.getCityDistanceUsingGETWithHttpInfo(cityId, toCityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get city containing region
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlaceResponse} and HTTP response
     */
    this.getCityLocatedInUsingGETWithHttpInfo = function(cityId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityLocatedInUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlaceResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}/locatedIn', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get city containing region
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlaceResponse}
     */
    this.getCityLocatedInUsingGET = function(cityId, opts) {
      return this.getCityLocatedInUsingGETWithHttpInfo(cityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get city time
     * Get city time
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TimeResponse} and HTTP response
     */
    this.getCityTimeUsingGETWithHttpInfo = function(cityId) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityTimeUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TimeResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}/time', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get city time
     * Get city time
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TimeResponse}
     */
    this.getCityTimeUsingGET = function(cityId) {
      return this.getCityTimeUsingGETWithHttpInfo(cityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get city details
     * Get city details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlaceResponse} and HTTP response
     */
    this.getCityUsingGETWithHttpInfo = function(cityId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityUsingGET");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlaceResponse;

      return this.apiClient.callApi(
        '/geo/cities/{cityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get city details
     * Get city details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlaceResponse}
     */
    this.getCityUsingGET = function(cityId, opts) {
      return this.getCityUsingGETWithHttpInfo(cityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find countries
     * Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyCode Only countries supporting this currency
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD = code | name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountriesResponse} and HTTP response
     */
    this.getCountriesUsingGETWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'currencyCode': opts['currencyCode'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountriesResponse;

      return this.apiClient.callApi(
        '/geo/countries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find countries
     * Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyCode Only countries supporting this currency
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD = code | name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountriesResponse}
     */
    this.getCountriesUsingGET = function(opts) {
      return this.getCountriesUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get country details
     * Get country details such as number of regions.
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CountryResponse} and HTTP response
     */
    this.getCountryUsingGETWithHttpInfo = function(countryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getCountryUsingGET");
      }


      var pathParams = {
        'countryId': countryId
      };
      var queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountryResponse;

      return this.apiClient.callApi(
        '/geo/countries/{countryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get country details
     * Get country details such as number of regions.
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CountryResponse}
     */
    this.getCountryUsingGET = function(countryId, opts) {
      return this.getCountryUsingGETWithHttpInfo(countryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get place date-time
     * Get place date-time
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DateTimeResponse} and HTTP response
     */
    this.getPlaceDateTimeUsingGETWithHttpInfo = function(placeId) {
      var postBody = null;

      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling getPlaceDateTimeUsingGET");
      }


      var pathParams = {
        'placeId': placeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DateTimeResponse;

      return this.apiClient.callApi(
        '/geo/places/{placeId}/dateTime', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get place date-time
     * Get place date-time
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DateTimeResponse}
     */
    this.getPlaceDateTimeUsingGET = function(placeId) {
      return this.getPlaceDateTimeUsingGETWithHttpInfo(placeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get place distance
     * Get distance from the given place
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {String} toPlaceId Distance to this place
     * @param {Object} opts Optional parameters
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistanceResponse} and HTTP response
     */
    this.getPlaceDistanceUsingGETWithHttpInfo = function(placeId, toPlaceId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling getPlaceDistanceUsingGET");
      }

      // verify the required parameter 'toPlaceId' is set
      if (toPlaceId === undefined || toPlaceId === null) {
        throw new Error("Missing the required parameter 'toPlaceId' when calling getPlaceDistanceUsingGET");
      }


      var pathParams = {
        'placeId': placeId
      };
      var queryParams = {
        'toPlaceId': toPlaceId,
        'distanceUnit': opts['distanceUnit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DistanceResponse;

      return this.apiClient.callApi(
        '/geo/places/{placeId}/distance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get place distance
     * Get distance from the given place
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {String} toPlaceId Distance to this place
     * @param {Object} opts Optional parameters
     * @param {String} opts.distanceUnit The unit of distance: MI | KM (default to MI)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistanceResponse}
     */
    this.getPlaceDistanceUsingGET = function(placeId, toPlaceId, opts) {
      return this.getPlaceDistanceUsingGETWithHttpInfo(placeId, toPlaceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get place containing region
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlaceResponse} and HTTP response
     */
    this.getPlaceLocatedInUsingGETWithHttpInfo = function(placeId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling getPlaceLocatedInUsingGET");
      }


      var pathParams = {
        'placeId': placeId
      };
      var queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlaceResponse;

      return this.apiClient.callApi(
        '/geo/places/{placeId}/locatedIn', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get place containing region
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlaceResponse}
     */
    this.getPlaceLocatedInUsingGET = function(placeId, opts) {
      return this.getPlaceLocatedInUsingGETWithHttpInfo(placeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get place time
     * Get place time
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TimeResponse} and HTTP response
     */
    this.getPlaceTimeUsingGETWithHttpInfo = function(placeId) {
      var postBody = null;

      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling getPlaceTimeUsingGET");
      }


      var pathParams = {
        'placeId': placeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TimeResponse;

      return this.apiClient.callApi(
        '/geo/places/{placeId}/time', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get place time
     * Get place time
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TimeResponse}
     */
    this.getPlaceTimeUsingGET = function(placeId) {
      return this.getPlaceTimeUsingGETWithHttpInfo(placeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get place details
     * Get place details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PopulatedPlaceResponse} and HTTP response
     */
    this.getPlaceUsingGETWithHttpInfo = function(placeId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling getPlaceUsingGET");
      }


      var pathParams = {
        'placeId': placeId
      };
      var queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PopulatedPlaceResponse;

      return this.apiClient.callApi(
        '/geo/places/{placeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get place details
     * Get place details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} placeId A place id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PopulatedPlaceResponse}
     */
    this.getPlaceUsingGET = function(placeId, opts) {
      return this.getPlaceUsingGETWithHttpInfo(placeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get region details
     * Get country region details such as number of cities.
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegionResponse} and HTTP response
     */
    this.getRegionUsingGETWithHttpInfo = function(countryId, regionCode, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getRegionUsingGET");
      }

      // verify the required parameter 'regionCode' is set
      if (regionCode === undefined || regionCode === null) {
        throw new Error("Missing the required parameter 'regionCode' when calling getRegionUsingGET");
      }


      var pathParams = {
        'countryId': countryId,
        'regionCode': regionCode
      };
      var queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegionResponse;

      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions/{regionCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get region details
     * Get country region details such as number of cities.
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {String} opts.languageCode Display results in this language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegionResponse}
     */
    this.getRegionUsingGET = function(countryId, regionCode, opts) {
      return this.getRegionUsingGETWithHttpInfo(countryId, regionCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find country regions
     * Get the country's regions. These could be states, provinces, districts, or otherwise major political divisions. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD = fipsCode | isoCode | name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegionsResponse} and HTTP response
     */
    this.getRegionsUsingGETWithHttpInfo = function(countryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getRegionsUsingGET");
      }


      var pathParams = {
        'countryId': countryId
      };
      var queryParams = {
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegionsResponse;

      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find country regions
     * Get the country's regions. These could be states, provinces, districts, or otherwise major political divisions. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {String} opts.namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} opts.namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (default to true)
     * @param {Boolean} opts.asciiMode Display results using ASCII characters (default to false)
     * @param {Boolean} opts.hateoasMode Include HATEOAS-style links in results (default to true)
     * @param {String} opts.languageCode Display results in this language
     * @param {Number} opts.limit The maximum number of results to retrieve (default to 10)
     * @param {Number} opts.offset The zero-ary offset index into the results (default to 0)
     * @param {String} opts.sort How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD = fipsCode | isoCode | name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegionsResponse}
     */
    this.getRegionsUsingGET = function(countryId, opts) {
      return this.getRegionsUsingGETWithHttpInfo(countryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
