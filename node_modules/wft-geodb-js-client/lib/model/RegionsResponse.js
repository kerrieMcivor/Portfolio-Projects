/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global places and regions. Easily obtain country, region, and place data for use in your apps!  <ul>   <li>Filter places by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort places by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all places in a given country or region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure.</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain places     being marked deleted (e.g., duplicates removed). By default, endpoints returning place data will exclude     places marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BaseCollectionResponse', 'model/Error', 'model/Link', 'model/Metadata', 'model/RegionSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BaseCollectionResponse'), require('./Error'), require('./Link'), require('./Metadata'), require('./RegionSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.GeoDb) {
      root.GeoDb = {};
    }
    root.GeoDb.RegionsResponse = factory(root.GeoDb.ApiClient, root.GeoDb.BaseCollectionResponse, root.GeoDb.Error, root.GeoDb.Link, root.GeoDb.Metadata, root.GeoDb.RegionSummary);
  }
}(this, function(ApiClient, BaseCollectionResponse, Error, Link, Metadata, RegionSummary) {
  'use strict';

  /**
   * The RegionsResponse model module.
   * @module model/RegionsResponse
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>RegionsResponse</code>.
   * A list of country regions
   * @alias module:model/RegionsResponse
   * @class
   * @extends module:model/BaseCollectionResponse
   */
  var exports = function() {
    BaseCollectionResponse.call(this);
  };

  /**
   * Constructs a <code>RegionsResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RegionsResponse} obj Optional instance to populate.
   * @return {module:model/RegionsResponse} The populated <code>RegionsResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      BaseCollectionResponse.constructFromObject(data, obj);
      if (data.hasOwnProperty('data'))
        obj.data = ApiClient.convertToType(data['data'], [RegionSummary]);
    }
    return obj;
  }

  exports.prototype = Object.create(BaseCollectionResponse.prototype);
  exports.prototype.constructor = exports;
  /**
   * A list of RegionSummaries
   * @member {Array.<module:model/RegionSummary>} data
   */
  exports.prototype.data = undefined;


  return exports;

}));
