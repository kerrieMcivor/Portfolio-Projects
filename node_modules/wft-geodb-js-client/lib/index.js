/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global places and regions. Easily obtain country, region, and place data for use in your apps!  <ul>   <li>Filter places by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort places by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all places in a given country or region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure.</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain places     being marked deleted (e.g., duplicates removed). By default, endpoints returning place data will exclude     places marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestResponse', 'model/BaseCollectionResponse', 'model/BaseResponse', 'model/CountriesResponse', 'model/CountryDetails', 'model/CountryResponse', 'model/CountrySummary', 'model/CurrenciesResponse', 'model/Currency', 'model/DateTimeResponse', 'model/DistanceResponse', 'model/Error', 'model/ErrorCode', 'model/ForbiddenResponse', 'model/LanguageDescriptor', 'model/LanguagesResponse', 'model/Link', 'model/Locale', 'model/LocalesResponse', 'model/Metadata', 'model/NotFoundResponse', 'model/PopulatedPlaceDetails', 'model/PopulatedPlaceResponse', 'model/PopulatedPlaceSummary', 'model/PopulatedPlaceType', 'model/PopulatedPlacesResponse', 'model/RegionDetails', 'model/RegionResponse', 'model/RegionSummary', 'model/RegionsResponse', 'model/TimeResponse', 'model/TimeZoneDescriptor', 'model/TimeZoneResponse', 'model/TimeZonesResponse', 'api/GeoApi', 'api/LocaleApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/BadRequestResponse'), require('./model/BaseCollectionResponse'), require('./model/BaseResponse'), require('./model/CountriesResponse'), require('./model/CountryDetails'), require('./model/CountryResponse'), require('./model/CountrySummary'), require('./model/CurrenciesResponse'), require('./model/Currency'), require('./model/DateTimeResponse'), require('./model/DistanceResponse'), require('./model/Error'), require('./model/ErrorCode'), require('./model/ForbiddenResponse'), require('./model/LanguageDescriptor'), require('./model/LanguagesResponse'), require('./model/Link'), require('./model/Locale'), require('./model/LocalesResponse'), require('./model/Metadata'), require('./model/NotFoundResponse'), require('./model/PopulatedPlaceDetails'), require('./model/PopulatedPlaceResponse'), require('./model/PopulatedPlaceSummary'), require('./model/PopulatedPlaceType'), require('./model/PopulatedPlacesResponse'), require('./model/RegionDetails'), require('./model/RegionResponse'), require('./model/RegionSummary'), require('./model/RegionsResponse'), require('./model/TimeResponse'), require('./model/TimeZoneDescriptor'), require('./model/TimeZoneResponse'), require('./model/TimeZonesResponse'), require('./api/GeoApi'), require('./api/LocaleApi'));
  }
}(function(ApiClient, BadRequestResponse, BaseCollectionResponse, BaseResponse, CountriesResponse, CountryDetails, CountryResponse, CountrySummary, CurrenciesResponse, Currency, DateTimeResponse, DistanceResponse, Error, ErrorCode, ForbiddenResponse, LanguageDescriptor, LanguagesResponse, Link, Locale, LocalesResponse, Metadata, NotFoundResponse, PopulatedPlaceDetails, PopulatedPlaceResponse, PopulatedPlaceSummary, PopulatedPlaceType, PopulatedPlacesResponse, RegionDetails, RegionResponse, RegionSummary, RegionsResponse, TimeResponse, TimeZoneDescriptor, TimeZoneResponse, TimeZonesResponse, GeoApi, LocaleApi) {
  'use strict';

  /**
   * Provides Javascript client bindings to the GeoDB service..<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var GeoDb = require('index'); // See note below*.
   * var xxxSvc = new GeoDb.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new GeoDb.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new GeoDb.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new GeoDb.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The BadRequestResponse model constructor.
     * @property {module:model/BadRequestResponse}
     */
    BadRequestResponse: BadRequestResponse,
    /**
     * The BaseCollectionResponse model constructor.
     * @property {module:model/BaseCollectionResponse}
     */
    BaseCollectionResponse: BaseCollectionResponse,
    /**
     * The BaseResponse model constructor.
     * @property {module:model/BaseResponse}
     */
    BaseResponse: BaseResponse,
    /**
     * The CountriesResponse model constructor.
     * @property {module:model/CountriesResponse}
     */
    CountriesResponse: CountriesResponse,
    /**
     * The CountryDetails model constructor.
     * @property {module:model/CountryDetails}
     */
    CountryDetails: CountryDetails,
    /**
     * The CountryResponse model constructor.
     * @property {module:model/CountryResponse}
     */
    CountryResponse: CountryResponse,
    /**
     * The CountrySummary model constructor.
     * @property {module:model/CountrySummary}
     */
    CountrySummary: CountrySummary,
    /**
     * The CurrenciesResponse model constructor.
     * @property {module:model/CurrenciesResponse}
     */
    CurrenciesResponse: CurrenciesResponse,
    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency: Currency,
    /**
     * The DateTimeResponse model constructor.
     * @property {module:model/DateTimeResponse}
     */
    DateTimeResponse: DateTimeResponse,
    /**
     * The DistanceResponse model constructor.
     * @property {module:model/DistanceResponse}
     */
    DistanceResponse: DistanceResponse,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorCode model constructor.
     * @property {module:model/ErrorCode}
     */
    ErrorCode: ErrorCode,
    /**
     * The ForbiddenResponse model constructor.
     * @property {module:model/ForbiddenResponse}
     */
    ForbiddenResponse: ForbiddenResponse,
    /**
     * The LanguageDescriptor model constructor.
     * @property {module:model/LanguageDescriptor}
     */
    LanguageDescriptor: LanguageDescriptor,
    /**
     * The LanguagesResponse model constructor.
     * @property {module:model/LanguagesResponse}
     */
    LanguagesResponse: LanguagesResponse,
    /**
     * The Link model constructor.
     * @property {module:model/Link}
     */
    Link: Link,
    /**
     * The Locale model constructor.
     * @property {module:model/Locale}
     */
    Locale: Locale,
    /**
     * The LocalesResponse model constructor.
     * @property {module:model/LocalesResponse}
     */
    LocalesResponse: LocalesResponse,
    /**
     * The Metadata model constructor.
     * @property {module:model/Metadata}
     */
    Metadata: Metadata,
    /**
     * The NotFoundResponse model constructor.
     * @property {module:model/NotFoundResponse}
     */
    NotFoundResponse: NotFoundResponse,
    /**
     * The PopulatedPlaceDetails model constructor.
     * @property {module:model/PopulatedPlaceDetails}
     */
    PopulatedPlaceDetails: PopulatedPlaceDetails,
    /**
     * The PopulatedPlaceResponse model constructor.
     * @property {module:model/PopulatedPlaceResponse}
     */
    PopulatedPlaceResponse: PopulatedPlaceResponse,
    /**
     * The PopulatedPlaceSummary model constructor.
     * @property {module:model/PopulatedPlaceSummary}
     */
    PopulatedPlaceSummary: PopulatedPlaceSummary,
    /**
     * The PopulatedPlaceType model constructor.
     * @property {module:model/PopulatedPlaceType}
     */
    PopulatedPlaceType: PopulatedPlaceType,
    /**
     * The PopulatedPlacesResponse model constructor.
     * @property {module:model/PopulatedPlacesResponse}
     */
    PopulatedPlacesResponse: PopulatedPlacesResponse,
    /**
     * The RegionDetails model constructor.
     * @property {module:model/RegionDetails}
     */
    RegionDetails: RegionDetails,
    /**
     * The RegionResponse model constructor.
     * @property {module:model/RegionResponse}
     */
    RegionResponse: RegionResponse,
    /**
     * The RegionSummary model constructor.
     * @property {module:model/RegionSummary}
     */
    RegionSummary: RegionSummary,
    /**
     * The RegionsResponse model constructor.
     * @property {module:model/RegionsResponse}
     */
    RegionsResponse: RegionsResponse,
    /**
     * The TimeResponse model constructor.
     * @property {module:model/TimeResponse}
     */
    TimeResponse: TimeResponse,
    /**
     * The TimeZoneDescriptor model constructor.
     * @property {module:model/TimeZoneDescriptor}
     */
    TimeZoneDescriptor: TimeZoneDescriptor,
    /**
     * The TimeZoneResponse model constructor.
     * @property {module:model/TimeZoneResponse}
     */
    TimeZoneResponse: TimeZoneResponse,
    /**
     * The TimeZonesResponse model constructor.
     * @property {module:model/TimeZonesResponse}
     */
    TimeZonesResponse: TimeZonesResponse,
    /**
     * The GeoApi service constructor.
     * @property {module:api/GeoApi}
     */
    GeoApi: GeoApi,
    /**
     * The LocaleApi service constructor.
     * @property {module:api/LocaleApi}
     */
    LocaleApi: LocaleApi
  };

  return exports;
}));
